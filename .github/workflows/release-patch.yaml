name: ÂèëÂ∏ÉË°•‰∏Å
run-name: ${{ github.actor }} Ê≠£Âú®ÂèëÂ∏ÉË°•‰∏ÅüöÄ
on:
  push:
    branches:
      - test-patch
      - release

jobs:
  Release:
    runs-on: ubuntu-latest
    name: ÂèëÂ∏ÉüöÄ
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: ËØªÂèñÂåÖÂêç
        uses: SebRollen/toml-action@v1.2.0
        id: read-modpackname
        with:
          file: ${{ github.workspace }}/pack.toml
          field: 'name'
      - name: ËØªÂèñÁâàÊú¨Âè∑
        uses: SebRollen/toml-action@v1.2.0
        id: read-version
        with:
          file: ${{ github.workspace }}/pack.toml
          field: 'version'
      - name: ÁîüÊàêÊï¥ÂêàÂåÖnightlyÊûÑÂª∫ÂêéÁºÄ
        id: set_version_prefix
        run: |
          if [[ $GITHUB_REF != refs/heads/release ]]; then
            VERSION_SUFFIX="-nighly-build-${{ github.run_number }}"
            echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> $GITHUB_OUTPUT
          else
            echo "VERSION_SUFFIX=" >> $GITHUB_OUTPUT
          fi
      - name: Ëé∑ÂèñÊúÄËøëÁöÑtagÂπ∂ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè
        run: |
          # Ëé∑ÂèñÂΩìÂâç commit ÁöÑ hash
          current_commit=$(git rev-parse HEAD)
          # Ëé∑ÂèñÂΩìÂâç commit ÂÖ≥ËÅîÁöÑ tag
          current_commit_tags=$(git tag --points-at $current_commit)
          if [ -z "$current_commit_tags" ]; then
            # ÂΩìÂâç commit Ê≤°ÊúâÂÖ≥ËÅî tagÔºåÁõ¥Êé•ÂèñÊúÄÊñ∞ tag
            latest_tag=$(git tag --sort=-creatordate | head -n 1)
          else
            # ÂΩìÂâç commit ÊúâÂÖ≥ËÅî tagÔºåËøáÊª§ÊéâËøô‰∫õ tag ÂêéÂèñÊúÄÊñ∞ tag
            latest_tag=$(git tag --sort=-creatordate | grep -v "$current_commit_tags" | head -n 1)
          fi
          if [ -z "$latest_tag" ]; then
            echo "No suitable tag found. Exiting."
            exit 1
          fi
          echo "ÊúÄËøëÁöÑtagÊòØ: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
      - name: Prepare patch files
        run: |
          # ÁîüÊàêÂÆåÊï¥Â∑ÆÂºÇÊä•Âëä
          git diff --name-status ${{ env.LATEST_TAG }} HEAD > diff_report.txt
          
          # Ëß£ÊûêÂ∑ÆÂºÇÊä•Âëä
          grep -E '^D' diff_report.txt | cut -f2 > deleted_files.txt
          grep -E '^R' diff_report.txt | cut -f2 >> deleted_files.txt
          grep -E '^[A|M]' diff_report.txt | cut -f2 > added_files.txt
          grep -E '^R' diff_report.txt | cut -f3 >> added_files.txt
          grep -E '^C' diff_report.txt | cut -f3 >> added_files.txt

          # ÂàõÂª∫Ë°•‰∏ÅÁõÆÂΩï
          mkdir -p patch

          # Â§çÂà∂Êñ∞Â¢û/‰øÆÊîπÊñá‰ª∂
          while IFS= read -r file; do
            mkdir -p "patch/$(dirname "$file")"
            cp "$file" "patch/$file"
          done < added_files.txt

          # ÁßªÈô§ÂÆ¢Êà∑Á´ØonlyÁöÑmod
          mapfile -t prefixes < .clientonlymodlist
          for prefix in "${prefixes[@]}"; do
            echo "Deleting files with prefix: $prefix"
            if [ -d "patch/mods" ]; then
              find patch/mods -name "${prefix}*" -exec rm {} +
            fi
          done

          # ÁßªÈô§Êó†Áî®Êñá‰ª∂
          rm -f patch/ModList0.4a.md
          rm -f patch/README.md
          rm -f patch/TODOlist.md
          rm -f patch/KubeJSStyleGuide.md
          rm -f patch/DevGuide.md
          rm -f patch/pack.toml
          rm -f patch/index.toml
          rm -f patch/client_jvm_args.example.txt

      - name: Create Linux script
        run: |
          cat << 'EOF' > deploy-patch.sh
          #!/bin/bash
          echo "Applying Patch..."
          BASE_DIR=$(dirname "$(readlink -f "$0")")

          # files to be deleted
          if [ -f "$BASE_DIR/deleted_files.txt" ]; then
            while IFS= read -r line; do
              file_path="$BASE_DIR/$line"
              if [ -f "$file_path" ]; then
                rm -v "$file_path" || { echo "Error: Cannot delete $file_path"; exit 1; }
              else
                echo "Error: File $file_path not found for deletion"
              fi
            done < "$BASE_DIR/deleted_files.txt"
          else
            echo "Error: $BASE_DIR/deleted_files.txt not found"
          fi

          # move patched files to right place
          if [ -d "patch" ]; then
            cp -r "patch" "." || { echo "Error: Failed to copy 'patch' directory"; exit 1; }
          else
            echo "Error: 'patch' directory not found"
          fi

          # remove patch folder
          if [ -d "patch" ]; then
            rm -rf "patch" || { echo "Error: Failed to remove 'patch' directory"; exit 1; }
          else
            echo "Error: 'patch' directory not found for removal"
          fi

          echo -e "\nDoneÔºÅ"

          EOF

      - name: Create Windows script
        run: |
          cat << 'EOF' > deploy-patch.bat
          @echo off
          setlocal enabledelayedexpansion

          rem files to be deleted
          set "pathFile=deleted_files.txt"

          rem Check if the file exists
          if not exist "%pathFile%" (
              echo File %pathFile% doesn't exist.
              exit /b 1
          )

          rem read line by line and remove files
          for /f "usebackq delims=" %%a in ("%pathFile%") do (
              rem Convert Linux-style to Windows-style path
              set "path=%%a"
              set "path=!path:/=\!"
              
              rem Check if file exists and delete it
              if exist "!path!" (
                  echo Deleting: !path!
                  del "!path!"
                  if errorlevel 1 (
                      echo Error when delete !path!
                  )
              ) else (
                  echo File !path! doesn't exist.
              )
          )

          rem move patched files to right place
          xcopy /E /I /Y "patch" "."
          rd /S /Q "patch"

          endlocal
          EOF

      - name: ‰∏ä‰º†Ë°•‰∏Å
        uses: actions/upload-artifact@v4
        with:
          name: "[Patch]-${{ env.LATEST_TAG }}-to-${{ steps.read-version.outputs.value }}${{ steps.set_version_prefix.outputs.VERSION_SUFFIX }}"
          path: |
            deleted_files.txt
            deploy-patch.sh
            deploy-patch.bat
            patch/
      - run: echo "üçè This job's status is ${{ job.status }}."
